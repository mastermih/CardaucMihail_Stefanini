# Forward input for other Fluentd instances
<source>
  @type forward
  @id forward_input
  bind 0.0.0.0
  port 24224
</source>

# HTTP input (Fluentd as an HTTP collector)
<source>
  @type http
  @id http_input
  bind 0.0.0.0
  port 8080
</source>

# Tail logs from the Spring Boot app
<source>
  @type tail
  path /app/logs/log-file.log
  pos_file /fluentd/log/log-file.pos
  tag spring-boot.log
  format none
  time_format %Y-%m-%dT%H:%M:%S
</source>

# Count log levels (e.g., ERROR, INFO, DEBUG, WARN)
<filter spring-boot.log>
  @type grep
  <regexp>
    key message
    pattern /ERROR|INFO|DEBUG|WARN/
  </regexp>
</filter>

<filter spring-boot.log>
  @type prometheus
  <metric>
    name fluentd_springboot_log_count
    type counter
    desc "Count of Spring Boot logs by log level"
    labels log_level
    <record>
      log_level ${record["message"] =~ /ERROR|INFO|DEBUG|WARN/ ? $& : "unknown"}
    </record>
  </metric>
</filter>

# Count request types (e.g., GET, POST, PUT, DELETE) if applicable in the log messages
<filter spring-boot.log>
  @type prometheus
  <metric>
    name fluentd_springboot_log_count
    type counter
    desc "Count of Spring Boot logs by log level"
    labels log_level
    <record>
      log_level ${record["message"] =~ /ERROR|INFO|DEBUG|WARN/ ? $& : "unknown"}
    </record>
  </metric>
</filter>

# Capture response times from logs, specifying the 'key' for gauge type
<filter spring-boot.log>
  @type prometheus
  <metric>
    name fluentd_springboot_log_response_time_ms
    type gauge
    desc "Response time in logs (ms)"
    key response_time  # Define the key that stores the response time
    <record>
      response_time ${record["message"] =~ /\d+ms/ ? $&.to_i : 0}  # Convert response time to integer for gauge
    </record>
  </metric>
</filter>

# Output the logs to stdout (for debugging/logging)
<match spring-boot.log>
  @type stdout
</match>

# Apache access logs tail input
<source>
  @type tail
  path /opt/homebrew/var/log/httpd/access_log
  tag apache.access
  pos_file /fluentd/log/access_log.pos
  <parse>
    @type apache
  </parse>
</source>

# Apache error logs tail input
<source>
  @type tail
  path /opt/homebrew/var/log/httpd/error_log
  tag apache.error
  pos_file /fluentd/log/error_log.pos
  <parse>
    @type apache
  </parse>
</source>

# Match all Apache logs and export as Prometheus metrics
<match **>
  @type prometheus
</match>

<match **>
  @type loki
  url "http://order-management-loki-1:3100/loki/api/v1/push"
  <label>
    job fluentd
    instance "fluentd_instance"
    host ${hostname}
  </label>
  buffer_type memory
  flush_interval 5s  # Flush logs every 5 seconds (adjust as needed)
  flush_at_shutdown true  # Flush logs on Fluentd shutdown
</match>

# Output to Elasticsearch
<match application.logs>
  @type elasticsearch
  host elasticsearch
  port 9200
  logstash_format true  # Makes use of logstash-style index rotation
  logstash_prefix fluentd
  logstash_dateformat %Y.%m.%d
</match>

# Store the total number of outgoing records with custom labels
<match company.*>
  @type copy
  <store>
    @type prometheus
    <metric>
      name fluentd_output_status_num_records_total
      type counter
      desc "The total number of outgoing records"
      <labels>
        tag ${tag}
        hostname ${hostname}
      </labels>
    </metric>
  </store>
</match>

# Prometheus metric for total Apache HTTP requests
<match apache.access>
  @type prometheus
  <metric>
    name apache_http_requests_total
    type counter
    desc "Total number of Apache requests"
  </metric>
</match>

# Output Apache access logs to stdout (for debugging/logging)
<match apache.access>
  @type stdout
  @id stdout_output_apache_access
</match>

# Expose Fluentd's internal Prometheus metrics (monitoring Fluentd)
<source>
  @type prometheus
  bind 0.0.0.0
  port 24231
  metrics_path /metrics
</source>

# Monitor Fluentd's output for Prometheus scraping
<source>
  @type prometheus_output_monitor
  interval 10
  <labels>
    hostname ${hostname}
  </labels>
</source>